from boiga.codegen import Project
from boiga.ast import *

project = Project(template="test_files/Scratch Project.sb3")

cat = project.new_sprite("Sprite1")
overlay = project.new_sprite("Overlay")

chatlog = cat.new_list("chatlog", [
	"",
	">Hello, world!",
	">This is a test",
	"",
	"<Another message.",
	"",
	">Yet another",
	"",
	">And anooooooooother one",
	">- bye",
	"",
	"<And this one is even longer and",
	"<mult-",
	"<line",
	"",
	"<foo",
	"",
	">bar",
	">baz",
	"",
	">.",
	"",
	">",
	"",
	"<Lorem ipsum dolor sit amet,",
	"<consectetur adipiscing elit, sed",
	"<do eiusmod tempor incididunt ut",
	"<labore et dolore magna aliqua. Ut",
	"<enim ad minim veniam, quis nostrud",
	"<exercitation ullamco laboris nisi",
	"<ut aliquip ex ea commodo consequat.",
	"<Duis aute irure dolor in",
	"<reprehenderit in voluptate velit",
	"<esse cillum dolore eu fugiat nulla",
	"<pariatur. Excepteur sint occaecat",
	"<cupidatat non proident, sunt in",
	"<culpa qui officia deserunt mollit",
	"<anim id est laborum.",
	"",
	"<hello",
	"",
	">"+"A"*32
])

for codepoint in range(0x20, 0x7e):
	costume_data = open(f"assets/IBM_{codepoint}.png", "rb").read()
	cat.add_costume(f"IBM_{chr(codepoint)}", costume_data, "png")

overlay.add_costume(f"overlay", open(f"assets/overlay.svg", "rb").read(), "svg")

FONT_WIDTH = 9
FONT_HEIGHT = 18

#stdout = project.stage.new_list("stdout", [], monitor=[0, 0, 480-2, 292])

@cat.proc_def("draw_text [message]")
def draw_text(locals, message): return [
	locals.i[1:message.len()] >> [
		SetCostume(Literal("IBM_").join(message[locals.i])),
		Stamp(),
		ChangeXPos(FONT_WIDTH),
	]
]

MARGIN_LEFT = 64
MARGIN_RIGHT = MARGIN_LEFT
PADDING = 6
SMALL_RADIUS = 6
@cat.proc_def("draw_bubble_left [y] [width] [height]")
def draw_bubble_left(locals, y, width, height): return [
	# BUBBLE OUTLINE
	SetPenColour(0x2D478F),
	SetPenSize(FONT_HEIGHT + PADDING*2),

	# outer rectangle
	SetXYPos(-240+MARGIN_LEFT, y - (height-1) * FONT_HEIGHT),
	PenDown(),
	ChangeXPos(width * FONT_WIDTH),
	SetYPos(y),
	ChangeXPos(width * -FONT_WIDTH),
	SetYPos(y - (height-1) * FONT_HEIGHT),

	# lower-left corner
	SetPenSize(SMALL_RADIUS),
	ChangeXPos(-PADDING-SMALL_RADIUS),
	ChangeYPos(-PADDING-SMALL_RADIUS),
	ChangeXPos(+PADDING+SMALL_RADIUS),

	# inner rectangle
	SetXYPos(-240+MARGIN_LEFT, y - (height-1) * FONT_HEIGHT),
	SetPenSize(FONT_HEIGHT + (PADDING-1)*2),
	SetPenColour(0x4D97FF),
	ChangeXPos(width * FONT_WIDTH),
	SetYPos(y),
	ChangeXPos(width * -FONT_WIDTH),
	SetYPos(y - (height-1) * FONT_HEIGHT),

	# inner lower-left corner
	SetPenSize(SMALL_RADIUS-2),
	ChangeXPos(-PADDING-SMALL_RADIUS),
	ChangeYPos(-PADDING-SMALL_RADIUS),
	ChangeXPos(+PADDING+SMALL_RADIUS),

	# fill-in
	PenUp(),
	SetPenSize(FONT_HEIGHT),
	locals.i[1:height-1] >> [
		SetXYPos(-240+MARGIN_LEFT, y - locals.i * FONT_HEIGHT),
		PenDown(),
		ChangeXPos(width * FONT_WIDTH),
		PenUp(),
	],
]

@cat.proc_def("draw_bubble_right [y] [width] [height]")
def draw_bubble_right(locals, y, width, height): return [
	# BUBBLE OUTLINE
	SetPenColour(0x999999),
	SetPenSize(FONT_HEIGHT + PADDING*2),

	# outer rectangle
	SetXYPos(240 - MARGIN_RIGHT, y - (height-1) * FONT_HEIGHT),
	PenDown(),
	ChangeXPos(width * -FONT_WIDTH),
	SetYPos(y),
	ChangeXPos(width * FONT_WIDTH),
	SetYPos(y - (height-1) * FONT_HEIGHT),

	# lower-left corner
	SetPenSize(SMALL_RADIUS),
	ChangeXPos(+PADDING+SMALL_RADIUS),
	ChangeYPos(-PADDING-SMALL_RADIUS),
	ChangeXPos(-PADDING-SMALL_RADIUS),

	# inner rectangle
	SetXYPos(240 - MARGIN_LEFT, y - (height-1) * FONT_HEIGHT),
	SetPenSize(FONT_HEIGHT + (PADDING-1)*2),
	SetPenColour(0xe0e0e0),
	ChangeXPos(width * -FONT_WIDTH),
	SetYPos(y),
	ChangeXPos(width * FONT_WIDTH),
	SetYPos(y - (height-1) * FONT_HEIGHT),

	# inner lower-left corner
	SetPenSize(SMALL_RADIUS-2),
	ChangeXPos(+PADDING+SMALL_RADIUS),
	ChangeYPos(-PADDING-SMALL_RADIUS),
	ChangeXPos(-PADDING-SMALL_RADIUS),

	# fill-in
	PenUp(),
	SetPenSize(FONT_HEIGHT),
	locals.i[1:height-1] >> [
		SetXYPos(240 - MARGIN_LEFT, y - locals.i * FONT_HEIGHT),
		PenDown(),
		ChangeXPos(width * -FONT_WIDTH),
		PenUp(),
	],
]

@cat.proc_def("render [scrolly]")
def render(locals, scrolly): return [
	EraseAll(),

	locals.i <= math.floor(scrolly/-FONT_HEIGHT) - 1,

	IF (locals.i < 1) [
		locals.i <= 1
	],

	# scan upwards until first ""
	repeatuntil (chatlog[locals.i] == Literal("")) [
		locals.i.changeby(-1)
	],

	repeatuntil ((locals.i > chatlog.len()-1).OR( locals.i > (math.floor((scrolly-360)/-FONT_HEIGHT) - 5) )) [
		# find bubble height
		locals.i.changeby(1),
		locals.thisheight <= 0,
		locals.longestline <= 2,
		repeatuntil (chatlog[locals.i] == Literal("")) [
			IF (chatlog[locals.i].len() > locals.longestline) [
				locals.longestline <= chatlog[locals.i].len()
			],
			locals.thisheight.changeby(1),
			locals.i.changeby(1)
		],

		locals.i <= locals.i - locals.thisheight,
		IF (chatlog[locals.i][0] == ">") [
			draw_bubble_left(Literal(150) - ((locals.i-1) * FONT_HEIGHT) - scrolly, locals.longestline-2, locals.thisheight),

			repeatn (locals.thisheight) [
				SetXYPos(-240+MARGIN_LEFT - 4, Literal(150 + 7) - ((locals.i-1) * FONT_HEIGHT) - scrolly),
				draw_text(chatlog[locals.i]),
				locals.i.changeby(1)
			],
		],
		IF (chatlog[locals.i][0] == "<") [
			draw_bubble_right(Literal(150) - ((locals.i-1) * FONT_HEIGHT) - scrolly, locals.longestline-2, locals.thisheight),

			repeatn (locals.thisheight) [
				SetXYPos(Literal(240-MARGIN_LEFT - 4 + FONT_WIDTH*2) - chatlog[locals.i].len() * FONT_WIDTH, Literal(150 + 7) - ((locals.i-1) * FONT_HEIGHT) - scrolly),
				draw_text(chatlog[locals.i]),
				locals.i.changeby(1)
			],
		],

	]

]

velocity = cat.new_var("velocity")
scrollpos = cat.new_var("scrollpos")
scrolltarget = cat.new_var("scrolltarget")

ACCEL = 0.3
DAMPING = 0.6
MIN_SCROLL = -10

def get_max_scroll():
	return chatlog.len() * FONT_HEIGHT - 260


@cat.proc_def("gui_loop", turbo=False)
def gui_loop(locals): return [
	forever([

		# mouse drag scrolling
		IF (MouseDown()) [
			IF (locals.prevmouse == "true", [
				scrollpos <= locals.prevscrollpos + (MouseY() - locals.prevmousey),
				scrolltarget <= scrollpos
			]).ELSE([
				locals.prevscrollpos <= scrollpos,
				locals.prevmousey <= MouseY()
			]),
		],
		locals.prevmouse <= MouseDown(),

		# fancy bounce effect when scroll limits hit
		IF (scrolltarget < MIN_SCROLL) [
			IF (MouseDown(), [
				scrollpos <= (scrollpos - MIN_SCROLL) * 0.3 + MIN_SCROLL,
				scrolltarget <= scrollpos
			]).ELSE([
				scrolltarget <= MIN_SCROLL
			]),
		],
		locals.max_scroll <= get_max_scroll(),
		IF (scrolltarget > locals.max_scroll) [
			IF (MouseDown(), [
				scrollpos <= (scrollpos - locals.max_scroll) * 0.3 + locals.max_scroll,
				scrolltarget <= scrollpos
			]).ELSE([
				scrolltarget <= locals.max_scroll
			]),
		],

		# update velocity physics
		velocity <= (velocity + (scrolltarget - scrollpos) * ACCEL) * DAMPING,
		scrollpos <= scrollpos + velocity,
		IF ((velocity < 0.01).AND(abs(scrolltarget - scrollpos) < 1)) [
			velocity <= 0,
			scrollpos <= scrolltarget
		],

		# actually render
		render(Literal(0)-math.floor(scrollpos)),
	])
]

cat.on_press("up arrow", [
	scrollpos.changeby(-15),
	scrolltarget <= scrollpos,
	velocity <= 0
])

cat.on_press("down arrow", [
	scrollpos.changeby(15),
	scrolltarget <= scrollpos,
	velocity <= 0
])

# TODO: word-wrapping
@cat.proc_def("new_message [sender] [message]")
def new_message(locals, sender, message): return [
	chatlog.append(""),
	chatlog.append(sender.join(message)),
	scrolltarget <= get_max_scroll(),
]

cat.on_flag([
	Hide(),
	PenUp(),
	EraseAll(),

	velocity <= 0,
	scrollpos <= MIN_SCROLL,
	scrolltarget <= scrollpos,

	gui_loop(),
])

cat.on_flag([
	forever([
		AskAndWait(),
		new_message("<", Answer()),
		Wait(1),
		new_message(">", Literal("You said: ").join(Answer())),
	])
])

project.save("test.sb3", execute=False)
